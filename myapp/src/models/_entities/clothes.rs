//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "clothes")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub pid: Uuid,
    pub name: String,
    pub description: Option<String>,
    pub brand: String,
    pub category: String,
    pub size: String,
    pub color: String,
    pub material: Option<String>,
    pub price: Decimal,
    pub in_stock: bool,
    pub stock_quantity: i32,
    pub image_url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::clothes_coordinates::Entity")]
    ClothesCoordinates,
}

impl Related<super::coordinates::Entity> for Entity {
    fn to() -> RelationDef {
        super::clothes_coordinates::Relation::Coordinates.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::clothes_coordinates::Relation::Clothes.def().rev())
    }
}

impl Related<super::clothes_coordinates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ClothesCoordinates.def()
    }
}


