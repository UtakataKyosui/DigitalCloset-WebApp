//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "clothes_coordinates")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub clothes_id: i32,
    pub coordinate_id: i32,
    pub position: Option<String>,
    pub notes: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::clothes::Entity",
        from = "Column::ClothesId",
        to = "super::clothes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Clothes,
    #[sea_orm(
        belongs_to = "super::coordinates::Entity",
        from = "Column::CoordinateId",
        to = "super::coordinates::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Coordinates,
}

impl Related<super::clothes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clothes.def()
    }
}

impl Related<super::coordinates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Coordinates.def()
    }
}
